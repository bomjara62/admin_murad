# -*- coding: utf-8 -*-
import sqlite3
from threading import Thread
from time import sleep
from aiogram.dispatcher import FSMContext
from bs4 import BeautifulSoup
import requests
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from transformers import AutoTokenizer, AutoModelWithLMHead
import re
import random
from datetime import datetime
from dateutil.relativedelta import relativedelta
from anypay_api import AnyPay
from admin_panel import AdmPanel
import torch

device = "cuda:0" if torch.cuda.is_available() else "cpu"

print(device)

with open("/root/python_projects/murad_bot/murad_phrases.txt", 'r', encoding='utf-8') as f:
    murad_phrases = f.read().splitlines()
    f.close()

with open("/root/python_projects/murad_bot/info_murad_phrases.txt", 'r', encoding='utf-8') as f:
    murad_phrases_info = f.read().splitlines()
    f.close()

with open("/root/python_projects/murad_bot/bot_token.txt", 'r', encoding='utf-8') as f:
    token = f.read()
    f.close()

with open("/root/python_projects/murad_bot/payment_token.txt", 'r', encoding='utf-8') as f:
    paytokens = f.read().splitlines()
    f.close()

with open("/root/python_projects/murad_bot/admin_list.txt", 'r', encoding='utf-8') as f:
    nicks = f.read().splitlines()
    f.close()

"""
with open("murad_phrases.txt", 'r', encoding='utf-8') as f:
    murad_phrases = f.read().splitlines()
    f.close()

with open("info_murad_phrases.txt", 'r', encoding='utf-8') as f:
    murad_phrases_info = f.read().splitlines()
    f.close()

with open("bot_token.txt", 'r', encoding='utf-8') as f:
    token = f.read()
    f.close()

with open("payment_token.txt", 'r', encoding='utf-8') as f:
    paytokens = f.read().splitlines()
    f.close()

with open("admin_list.txt", 'r', encoding='utf-8') as f:
    nicks = f.read().splitlines()
    f.close()
"""
api_id = paytokens[0].replace('api_id = ', '')
api_key = paytokens[1].replace('api_key = ', '')
project_id = int(paytokens[2].replace('project_id = ', ''))

any_pay = AnyPay(api_id=api_id, api_key=api_key, project_id=project_id)

conn = sqlite3.connect("/root/python_projects/murad_bot/members_info.db")


#conn = sqlite3.connect("members_info.db")

adp = AdmPanel(token, conn, api_id, api_key, project_id)

cur = conn.cursor()

bot = Bot(token=token)

tokenizer = AutoTokenizer.from_pretrained('/root/python_projects/murad_bot/text_models/', add_prefix_space=True)
model = AutoModelWithLMHead.from_pretrained('/root/python_projects/murad_bot/text_models/')

#tokenizer = AutoTokenizer.from_pretrained('./text_models', add_prefix_space=True)
#model = AutoModelWithLMHead.from_pretrained('./text_models')

model.to(device)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

PRICE = types.LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü", amount=299 * 100)


def timechecker():
    while True:
        conn2 = sqlite3.connect("/root/python_projects/murad_bot/members_info.db")
        #conn2 = sqlite3.connect("members_info.db")
        cur2 = conn2.cursor()
        cur2.execute("SELECT * FROM conf")
        conf_list = list(cur2.fetchall())
        for conf in conf_list:
            if str(conf[10]) == str(datetime.today().strftime('%d/%m/%Y')):
                cur2.execute(f"UPDATE conf SET vip=0, vip_date='0/0/0' WHERE conf_id={conf[1]}")
                conn2.commit()
        sleep(30000)


@dp.message_handler(commands=['pro'])
async def buy(message: types.Message):
    payd = random.randint(100, 99999)
    url = await any_pay.create_form_of_payment(pay_id=5154, amount=10.0)
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'checkpay_{payd}')
    item2 = InlineKeyboardButton("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)
    markup.add(item1, item2)
    await bot.send_message(message.chat.id, """PRO –≤–µ—Ä—Å–∏—è –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ /commands 
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±–ª–µ–π / –º–µ—Å—è—Ü""", reply_markup=markup)


@dp.message_handler(commands=['admin'])
async def admins(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id in nicks:
        await adp.admin_panel(message, False)


@dp.message_handler(commands=['vip_active'])
async def active(message: types.Message):
    cur.execute(f"SELECT Codes FROM vip_codes WHERE Codes={message.text.replace('/vip_active ', '')}")
    col = cur.fetchone()
    if col is not None:
        date_after_month = datetime.today() + relativedelta(months=1)
        cur.execute(
            f"UPDATE conf SET vip=1, vip_date='{date_after_month.strftime('%d/%m/%Y')}' WHERE conf_id={str(message.chat.id)}")
        await bot.send_message(message.chat.id, "–í–∏–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –±–ª—è")
        cur.execute(
            f"DELETE FROM vip_codes WHERE Codes='{col[0]}'")
        conn.commit()
    else:
        await bot.send_message(message.chat.id, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    cur.execute(f'SELECT * FROM channels')
    channels_list = list(cur.fetchall())
    cur.execute(f"SELECT * FROM users_info WHERE user_id='{message.from_user.id}'")
    user = cur.fetchone()
    if user is None:
        cur.execute(f"INSERT INTO users_info(user_id) VALUES('{message.from_user.id}')")

    conn.commit()
    if channels_list:
        text = ''
        for chn in channels_list:
            text += chn[2] + '\n'
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='channels_check')
        markup.add(item1)
        await bot.send_message(message.chat.id,
                               f"–î–ª—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏ –∫–∞–Ω–∞–ª—ã:\n{text}",
                               reply_markup=markup)

    else:
        if message.text.replace('/start', '') == '':
            markup = InlineKeyboardMarkup(row_width=1)
            item1 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url="https://t.me/Murad_Aibot?startgroup=true")
            item2 = InlineKeyboardButton(text="PRO –≤–µ—Ä—Å–∏—è", callback_data='pro')
            markup.add(item1, item2)
            await bot.send_message(message.chat.id, f"""
–ó–¥–∞—Ä–æ–≤–∞, –±—Ä–∞—Ç–∏—à–∫–∞ <b>{message.from_user.first_name}</b>, —è, –±–ª—è, –ú—É—Ä–∞–¥ ‚Äî
–Ø —á–∞—Ç-–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –±–∞–∑–∞—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.
        
–ß–µ —è –º–æ–≥—É?
        
1. –ë–∞–∑–∞—Ä–∏—Ç—å —Å–æ –≤—Å–µ—ë —à–µ—Ä—Å—Ç—å—é –≤ –±–µ—Å–µ–¥–µ.
2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.
3. –®–ª—é —Å–∞–ª–∞–º—ã –Ω–æ–≤–∏—á–∫–∞–º.
4. –ü–æ–∫–∞–∂—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–µ.
5. –°–∫–∞–∂—É –ø–æ–≥–æ–¥—É –ø–æ—á—Ç–∏ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.
6. –°—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –±–ª—è.
        
–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–∏—Ö —É–º–µ–Ω–∏—è—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /commands
        """,
                                   reply_markup=markup, parse_mode='html')
        else:
            try:
                link = message.text.replace('/start ', '')
                cur.execute(f'SELECT * FROM links WHERE link_id="{link}"')
                link = list(cur.fetchone())
                if link:
                    cur.execute(f'UPDATE links SET ref_col={link[2] + 1} WHERE ID={link[0]}')
                    cur.execute(f"UPDATE users_info SET user_link='{link[1]}'")
                    conn.commit()
            except:
                pass
            markup = InlineKeyboardMarkup(row_width=1)
            item1 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url="https://t.me/Murad_Aibot?startgroup=true")
            item2 = InlineKeyboardButton(text="PRO –≤–µ—Ä—Å–∏—è", callback_data='pro')
            markup.add(item1, item2)
            await bot.send_message(message.chat.id, f"""
–ó–¥–∞—Ä–æ–≤–∞, –±—Ä–∞—Ç–∏—à–∫–∞ <b>{message.from_user.first_name}</b>, —è, –±–ª—è, –ú—É—Ä–∞–¥ ‚Äî
–Ø —á–∞—Ç-–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –±–∞–∑–∞—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–ß–µ —è –º–æ–≥—É?

1. –ë–∞–∑–∞—Ä–∏—Ç—å —Å–æ –≤—Å–µ—ë —à–µ—Ä—Å—Ç—å—é –≤ –±–µ—Å–µ–¥–µ.
2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.
3. –®–ª—é —Å–∞–ª–∞–º—ã –Ω–æ–≤–∏—á–∫–∞–º.
4. –ü–æ–∫–∞–∂—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–µ.
5. –°–∫–∞–∂—É –ø–æ–≥–æ–¥—É –ø–æ—á—Ç–∏ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.
6. –°—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –±–ª—è.

–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–∏—Ö —É–º–µ–Ω–∏—è—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /commands
                    """,
                                   reply_markup=markup, parse_mode='html')


@dp.message_handler(commands=['commands'])
async def commands_list(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=1)
    item1 = InlineKeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä —Å –ú—É—Ä–∞–¥–æ–º", callback_data='speech')
    item2 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ—É", callback_data='info')
    item3 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —É –ú—É—Ä–∞–¥–∞", callback_data='ask')
    item5 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É", callback_data='weather')
    item6 = InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='other')
    markup.add(item1, item2, item3, item5, item6)
    await bot.send_message(chat_id=message.chat.id,
                           text="–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞",
                           reply_markup=markup)


@dp.message_handler(content_types=['new_chat_members'])
async def send_welcome(message: types.Message):
    bot_obj = await bot.get_me()
    bot_id = bot_obj.id
    is_bot = False
    for chat_member in message.new_chat_members:
        if chat_member.id == bot_id:
            count = await bot.get_chat_members_count(message.chat.id)
            cur.execute(f"SELECT * FROM conf WHERE conf_id={message.chat.id}")
            chats = cur.fetchone()
            if chats is None:
                cur.execute("INSERT INTO conf(conf_id, activity, hello, karm, admin, vip, messages, activity_stat, "
                            "speak, start_date, members_count) "
                            f"VALUES({message.chat.id},0,0,0,0,0,0,0,0,'{str(datetime.today().strftime('%d/%m/%Y'))}',{count})")
                conn.commit()
            await bot.send_message(message.chat.id, "–Ø—Ö–∞–∞–∞–∞–∞–π–π–π–π–π–π–π –±–ª—è—è—è—è—è—è!!! –î–∞–ª–∏ –º–Ω–µ –∞–¥–º–∏–Ω–∫—É –±—ã—Å—Ç—Ä–æ, –±–ª—è")
            is_bot = True

    if not is_bot:
        cur.execute("SELECT * FROM conf WHERE conf_id")
        params = list(cur.fetchone())
        if params[3]:
            await bot.send_message(message.chat.id, "–ó–¥–∞—Ä–æ–≤–∞, –±—Ä–∞—Ç–∏—à–∫–∞")


@dp.message_handler(content_types='text')
async def all_messages_handler(message: types.Message, state: FSMContext):
    if str(message.from_user.id) in nicks and message.chat.type == 'private':
        async with state.proxy() as adata:
            if 'stage' in adata:
                stage = adata['stage']

                if stage == 'add_chn':
                    adata['chn_id'] = message.text
                    adata['stage'] = 'add_chn_2'
                    await bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª")

                elif stage == 'add_chn_2':
                    chn_id = adata['chn_id']
                    adata['stage'] = None
                    cur.execute(f"INSERT INTO channels(channel_id,channel_link) VALUES('{chn_id}','{message.text}')")
                    conn.commit()
                    await bot.send_message(message.chat.id, "–ö–∞–Ω–∞–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
                    markup = InlineKeyboardMarkup(row_width=1)
                    cur.execute('SELECT * FROM channels')
                    list_chn = list(cur.fetchall())
                    count = 0

                    for i in range(0, len(list_chn)):
                        count += 1
                        markup.add(InlineKeyboardButton(str(list_chn[i][1]),
                                                        callback_data='chnl_' + str(list_chn[i][0])))
                        if count == 5:
                            break

                    item1 = InlineKeyboardButton("<", callback_data='prev_chn')
                    item2 = InlineKeyboardButton(">", callback_data='next_chn')
                    item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_chn')
                    item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
                    markup.row(item1, item2)
                    markup.add(item3, item4)
                    async with state.proxy() as adata:
                        adata['list_chn'] = list_chn
                        adata['count'] = count
                    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

                elif stage == 'del_chn':
                    channels_list = message.text.rsplit(',')
                    for channel in channels_list:
                        cur.execute(f"DELETE FROM channels WHERE ID={channel})")
                        conn.commit()
                    adata['stage'] = None
                    await bot.send_message(message.chat.id, "–ö–∞–Ω–∞–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

                elif stage == 'add_lnk':
                    link = message.text

                    cur.execute(f"INSERT INTO links(link_id,ref_col,chat_col) VALUES('{link}',0,0)")
                    conn.commit()
                    adata['stage'] = None
                    markup = InlineKeyboardMarkup(row_width=1)
                    cur.execute('SELECT * FROM links')
                    list_lnk = list(cur.fetchall())
                    count = 0

                    for i in range(0, len(list_lnk)):
                        count += 1
                        markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                                        callback_data='link_' + str(list_lnk[i][0])))
                        if count == 5:
                            break

                    item1 = InlineKeyboardButton("<", callback_data='prev')
                    item2 = InlineKeyboardButton(">", callback_data='next')
                    item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
                    item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
                    markup.row(item1, item2)
                    markup.add(item3, item4)
                    async with state.proxy() as adata:
                        adata['list_lnk'] = list_lnk
                        adata['count'] = count

                    await bot.send_message(message.chat.id, "–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
                    await bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

                elif stage == 'del_lnk':
                    links_list = message.text.rsplit(',')
                    for link in links_list:
                        cur.execute(f"DELETE FROM links WHERE ID={link})")
                        conn.commit()
                    adata['stage'] = None
                    await bot.send_message(message.chat.id, "–ö–∞–Ω–∞–ª—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

    elif message.chat.type != 'private':
        print(1)
        try:
            cur.execute(f"SELECT * FROM conf WHERE conf_id={message.chat.id}")
            params = list(cur.fetchone())
        except:
            cur.execute("INSERT INTO conf(conf_id, activity, hello, karm, admin, vip, messages, activity_stat, "
                        "speak, start_date) "
                        f"VALUES({message.chat.id},0,0,0,0,0,0,0,0,'{str(datetime.today().strftime('%d/%m/%Y'))}')")
            cur.execute(f"SELECT * FROM conf WHERE conf_id={message.chat.id}")
            params = list(cur.fetchone())
            conn.commit()
        if "–º—É—Ä–∞–¥, –∏–Ω—Ñ–∞ —á—Ç–æ " == message.text[:16].lower():
            cur.execute(f"UPDATE conf SET activity_stat={int(params[8]) + 1} WHERE conf_id={message.chat.id}")
            text = message.text[16:]
            percent = random.randint(0, 100)
            id3 = random.randint(0, len(murad_phrases_info) - 1)
            await bot.send_message(message.chat.id, murad_phrases_info[id3] + " –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ " + text + " <b>" +
                                   str(percent) + "%</b>", parse_mode="html")

        elif "–º—É—Ä–∞–¥, —Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É –≤ " in message.text.lower():
            cur.execute(f"UPDATE conf SET activity_stat={int(params[8]) + 1} WHERE conf_id={message.chat.id}")
            city = message.text[22:]
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36'
            }

            res = requests.get(
                f'https://www.google.com/search?q={city} –ø–æ–≥–æ–¥–∞&oq={city} –ø–æ–≥–æ–¥–∞&aqs=chrome.0.35i39l2j0l4j46j69i60.6128j1j7&sourceid=chrome&ie=UTF-8',
                headers=headers, verify=False
            )

            soup = BeautifulSoup(res.text, 'html.parser')

            time = soup.select('#wob_dts')[0].getText().strip()
            precipitation = soup.select('#wob_dc')[0].getText().strip()
            weather = soup.select('#wob_tm')[0].getText().strip()

            await bot.send_message(message.chat.id, f"–û—Ç–≤–µ—á–∞—é, –±–ª—è, –±—Ä–∞—Ç–∏—à–∫–∞ –ø–æ–≥–æ–¥–∞ –≤ {city}:\n\n"
                                                    f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º—è: {time}\n"
                                                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Å–∞–¥–∫–∞—Ö: {precipitation}\n"
                                                    f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–∑–¥—É—Ö–∞: {weather}¬∞C\n")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –º–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è":
            cur.execute(
                f"SELECT * FROM users_statistic WHERE user2='{str(message.from_user.id)}' AND rep='+'")
            count_plus = list(cur.fetchall())
            cur.execute(
                f"SELECT * FROM users_statistic WHERE user2='{str(message.from_user.id)}' AND rep='-'")
            count_minus = list(cur.fetchall())
            rep = len(count_plus) - len(count_minus)
            if rep > 0:
                await bot.send_message(message.chat.id,
                                       f"–ë—Ä–∞—Ç–∏—à–∫–∞ @{message.from_user.username}, —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è {str(rep)}")
            elif rep < 0:
                await bot.send_message(message.chat.id,
                                       f"–®–µ—Ä—Å—Ç—å –µ–±—É—á–∞—è @{message.from_user.username}, —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è {str(rep)}")
            else:
                await bot.send_message(message.chat.id,
                                       f"–¢—ã –±–ª—è —Ö—É–π –∑–Ω–∞–µ—Ç —á–µ @{message.from_user.username}, —Ç–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è {str(rep)}")

        elif message.text.lower() == "–º—É—Ä–∞–¥, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await bot.send_message(message.chat.id,
                                   "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —á–∞—Ç–µ:\n"
                                   f"<b>1. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {params[7]}\n"
                                   f"2. –£—Ä–æ–≤–µ–Ω—å –º–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {str((params[8] / params[7]) * 100)}</b>",
                                   parse_mode="html")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –æ—Ç–∫–ª—é—á–∏ –∫–∞—Ä–º—É":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                await bot.send_message(message.chat.id,
                                       f"–ö–∞—Ä–º–∞ <b>–æ—Ç–∫–ª—é—á–µ–Ω–∞</b>, –±–ª—è.", parse_mode="html")
                cur.execute(f"UPDATE conf SET karm=1 WHERE conf_id={message.chat.id}")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –≤–∫–ª—é—á–∏ –∫–∞—Ä–º—É":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                await bot.send_message(message.chat.id,
                                       f"–ö–∞—Ä–º–∞ <b>–≤–∫–ª—é—á–µ–Ω–∞</b>, –±–ª—è.", parse_mode="html")
                cur.execute(f"UPDATE conf SET karm=0 WHERE conf_id={message.chat.id}")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –≤–∫–ª—é—á–∏—Å—å":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                if int(params[6]) == 1:
                    await bot.send_message(message.chat.id,
                                           f"–Ø–•–∞–∞–∞–∞–∞–∞–∞–∞–∞–π–π–π–π –±–ª—è—è—è—è—è—è—è—è—è!!! –Ø —Ç—É—Ç, –±–ª—è.")
                    cur.execute(f"UPDATE conf SET speak=1 WHERE conf_id={message.chat.id}")
                else:
                    await bot.send_message(message.chat.id,
                                           f"–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø–∫–∏, –±–ª—è.")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –æ—Ç–∫–ª—é—á–∏—Å—å":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                if int(params[6]) == 1:
                    await bot.send_message(message.chat.id,
                                           f"–ê–π –∏–¥–∏—Ç–µ –Ω–∞—Ö—É–π, —è —Å—ä—ë–±—ã–≤–∞—é.")
                    cur.execute(f"UPDATE conf SET speak=0 WHERE conf_id={message.chat.id}")
                else:
                    await bot.send_message(message.chat.id,
                                           f"–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø–∫–∏, –±–ª—è.")

        elif message.text[:26].lower() == "–º—É—Ä–∞–¥, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ " and params[6] == 1:
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                if int(params[6]) == 1:
                    lvl = int(message.text[26:])
                    await bot.send_message(message.chat.id,
                                           f"–ü–æ–Ω—è–ª –±–ª—è")

                    cur.execute(f"UPDATE conf SET activity={lvl} WHERE conf_id={message.chat.id}")
                else:
                    await bot.send_message(message.chat.id,
                                           f"–≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–ø–∫–∏, –±–ª—è.")
        elif message.text.lower() == "–º—É—Ä–∞–¥, –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin():
                await bot.send_message(message.chat.id,
                                       f"–ü–æ–Ω—è–ª –±–ª—è")
                cur.execute(f"UPDATE conf SET admin=1 WHERE conf_id={message.chat.id}")
            else:
                await bot.send_message(message.chat.id,
                                       f"–¢–∞–∫–æ–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–ª—è")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin():
                await bot.send_message(message.chat.id,
                                       f"–ü–æ–Ω—è–ª –±–ª—è")
                cur.execute(f"UPDATE conf SET admin=0 WHERE conf_id={message.chat.id}")
            else:
                await bot.send_message(message.chat.id,
                                       f"–¢–∞–∫–æ–µ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –±–ª—è")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                await bot.send_message(message.chat.id,
                                       f"–ü–æ–Ω—è–ª –±–ª—è")
                cur.execute(f"UPDATE conf SET hello=0 WHERE conf_id={message.chat.id}")

        elif message.text.lower() == "–º—É—Ä–∞–¥, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –≤—Å–µ—Ö":
            member = await bot.get_chat_member(message.chat.id, message.from_user.id)
            if member.is_chat_admin() or int(params[5]) == 0:
                await bot.send_message(message.chat.id,
                                       f"–ü–æ–Ω—è–ª –±–ª—è")
                cur.execute(f"UPDATE conf SET hello=1 WHERE conf_id={message.chat.id}")

        elif "–º—É—Ä–∞–¥," == message.text[:6].lower():
            cur.execute(f"UPDATE conf SET activity_stat={int(params[8]) + 1} WHERE conf_id={message.chat.id}")
            text = message.text[6:]
            inputs = tokenizer(f'@@–ü–ï–†–í–´–ô@@{text} @@–í–¢–û–†–û–ô@@',
                               return_tensors='pt').to(device)
            force_words = []
            for word in murad_phrases:
                force_words.append(tokenizer(word, add_special_tokens=True).input_ids)

            generated_token_ids = model.generate(
                **inputs,
                top_k=10,
                top_p=0.95,
                num_beams=20,
                num_return_sequences=1,
                do_sample=False,
                no_repeat_ngram_size=2,
                temperature=1.0,
                repetition_penalty=1.2,
                force_words_ids=[force_words],
                length_penalty=1.0,
                eos_token_id=50257,
                max_time=0.5,
                max_new_tokens=50
            ).to(device)

            context_with_response = [tokenizer.decode(sample_token_ids) for sample_token_ids in generated_token_ids]

            result = re.search('@@–í–¢–û–†–û–ô@@(.*)@@–ü–ï–†–í–´–ô@@', str(context_with_response[0]))

            if result is None:
                result = str(context_with_response[0]).split("@@–í–¢–û–†–û–ô@@", 1)[1]
                await bot.send_message(message.chat.id, result)
            else:
                await bot.send_message(message.chat.id, result.group(1))

        elif message.reply_to_message is not None and int(params[4]) == 0:
            user1 = message.from_user.id
            user2 = message.reply_to_message.from_user.id
            if message.text == '+':
                cur.execute(
                    f"SELECT * FROM users_statistic WHERE user1='{str(user1)}' AND user2='{str(user2)}' AND rep='+'")
                count = cur.fetchall()
                if not count:
                    cur.execute(
                        f"DELETE FROM users_statistic WHERE user1='{str(user1)}' AND user2='{str(user2)}' AND rep='-'")
                    await bot.send_message(message.chat.id,
                                           f"–¢—ã, –±–ª—è, –ø–æ–≤—ã—Å–∏–ª —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –±—Ä–∞—Ç–∏—à–∫–µ @{message.reply_to_message.from_user.username}")
                    cur.execute(
                        f"INSERT INTO users_statistic(user1,user2,rep) VALUES('{str(user1)}','{str(user2)}', '+')")
            elif message.text == '-':
                cur.execute(
                    f"SELECT * FROM users_statistic WHERE user1='{str(user1)}' AND user2='{str(user2)}' AND rep='-'")

                count = cur.fetchall()
                if not count:
                    cur.execute(
                        f"DELETE FROM users_statistic WHERE user1='{str(user1)}' AND user2='{str(user2)}' AND rep='+'")
                    await bot.send_message(message.chat.id,
                                           f"–¢—ã, –±–ª—è, –ø–æ–Ω–∏–∑–∏–ª —É—Ä–æ–≤–µ–Ω—å —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ —à–µ—Ä—Å—Ç–∏ –µ–±—É—á–µ–π @{message.reply_to_message.from_user.username}")
                    cur.execute(
                        f"INSERT INTO users_statistic(user1,user2,rep) VALUES('{str(user1)}','{str(user2)}', '-')")

            conn.commit()

        elif params[9] == 1 and params[6] == 1:
            cur.execute(f"UPDATE conf SET activity_stat={int(params[8]) + 1} WHERE conf_id={message.chat.id}")
            chance = random.randint(0, 100)
            if chance < params[2]:
                text = message.text
                inputs = tokenizer(f'@@–ü–ï–†–í–´–ô@@{text} @@–í–¢–û–†–û–ô@@',
                                   return_tensors='pt')
                force_words = []
                for word in murad_phrases:
                    force_words.append(tokenizer(word, add_special_tokens=True).input_ids)

                generated_token_ids = model.generate(
                    **inputs,
                    top_k=10,
                    top_p=0.95,
                    num_beams=20,
                    num_return_sequences=1,
                    do_sample=False,
                    no_repeat_ngram_size=2,
                    temperature=1.0,
                    repetition_penalty=1.2,
                    force_words_ids=[force_words],
                    length_penalty=1.0,
                    eos_token_id=50257,
                    max_time=2,
                    max_new_tokens=50
                )

                context_with_response = [tokenizer.decode(sample_token_ids) for sample_token_ids in generated_token_ids]

                result = re.search('@@–í–¢–û–†–û–ô@@(.*)@@–ü–ï–†–í–´–ô@@', str(context_with_response[0]))

                if result is None:
                    result = str(context_with_response[0]).split("@@–í–¢–û–†–û–ô@@", 1)[1]
                    await bot.send_message(message.chat.id, result)
                else:
                    await bot.send_message(message.chat.id, result.group(1))
        cur.execute(f"UPDATE conf SET messages={int(params[7]) + 1} WHERE conf_id={message.chat.id}")
        conn.commit()
    else:
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url="https://t.me/Murad_Aibot?startgroup=true")
        item2 = InlineKeyboardButton(text="PRO –≤–µ—Ä—Å–∏—è", callback_data='pro')
        markup.add(item1, item2)
        await bot.send_message(message.chat.id, """–Ø —Ä–∞–±–æ—Ç–∞—é —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö.
    
–¢—ã–∫–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –≤ —Å–≤–æ–∏ —á–∞—Ç—ãüëá
    """, reply_markup=markup)


@dp.callback_query_handler()
async def callback_inline(call, state: FSMContext):

    if call.data == "back":

        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä —Å –ú—É—Ä–∞–¥–æ–º", callback_data='speech')
        item2 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ—É", callback_data='info')
        item3 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —É –ú—É—Ä–∞–¥–∞", callback_data='ask')
        item5 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–≥–æ–¥—É", callback_data='weather')
        item6 = InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='other')
        markup.add(item1, item2, item3, item5, item6)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞",
                                    reply_markup=markup)

    elif call.data == "podcat":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–†–∞–∑–≥–æ–≤–æ—Ä —Å –ú—É—Ä–∞–¥–æ–º", callback_data='speech')
        item2 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–Ω—Ñ—É", callback_data='info')
        item3 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —É –ú—É—Ä–∞–¥–∞", callback_data='ask')
        item5 = InlineKeyboardButton("–°–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É", callback_data='weather')
        item6 = InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data='other')
        item7 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1, item2, item3, item5, item6, item7)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞",
                                    reply_markup=markup)

    elif call.data == "statistic":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —É –ú—É—Ä–∞–¥–∞ –æ –≤–∞—à–µ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏.\n\n"
                                         "<b>1.–ú—É—Ä–∞–¥, –º–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è</b>.",
                                    reply_markup=markup, parse_mode="html")

    elif call.data == 'channels_check':
        cur.execute('SELECT * FROM channels')
        chn_list = list(cur.fetchall())
        passed = True
        for chn in chn_list:
            user_channel_status = await bot.get_chat_member(chat_id=chn[1], user_id=call.from_user.id)
            if user_channel_status["status"] == 'left':
                passed = False
                break

        if passed:
            markup = InlineKeyboardMarkup(row_width=1)
            item1 = InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç", url="https://t.me/Murad_Aibot?startgroup=true")
            item2 = InlineKeyboardButton(text="PRO –≤–µ—Ä—Å–∏—è", callback_data='pro')
            markup.add(item1, item2)
            await bot.send_message(call.message.chat.id, f"""
–ó–¥–∞—Ä–æ–≤–∞, –±—Ä–∞—Ç–∏—à–∫–∞ <b>{call.message.from_user.first_name}</b>, —è, –±–ª—è, –ú—É—Ä–∞–¥ ‚Äî
–Ø —á–∞—Ç-–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –±–∞–∑–∞—Ä–∏—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.

–ß–µ —è –º–æ–≥—É?

1. –ë–∞–∑–∞—Ä–∏—Ç—å —Å–æ –≤—Å–µ—ë —à–µ—Ä—Å—Ç—å—é –≤ –±–µ—Å–µ–¥–µ.
2. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é.
3. –®–ª—é —Å–∞–ª–∞–º—ã –Ω–æ–≤–∏—á–∫–∞–º.
4. –ü–æ–∫–∞–∂—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –≤–∞—à–µ–π –∫–æ–Ω—Ñ–µ.
5. –°–∫–∞–∂—É –ø–æ–≥–æ–¥—É –ø–æ—á—Ç–∏ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.
6. –°—Ç–∞–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º, –±–ª—è.

–ë–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–∏—Ö —É–º–µ–Ω–∏—è—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ –∫–æ–º–∞–Ω–¥–µ /commands
                """,
                                   reply_markup=markup, parse_mode='html')
        else:
            await bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã.")

    elif call.data == "info":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ú—É—Ä–∞–¥–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ç–æ–≥–æ –∏–ª–∏ –∏–Ω–æ–≥–æ "
                                         "—Å–æ–±—ã—Ç–∏—è.\n\n–ü—Ä–∏–º–µ—Ä:\n\n"
                                         "<b>1.–ú—É—Ä–∞–¥, –∏–Ω—Ñ–∞ —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–µ—Å—Ç–≤–∏–µ –ò–∏—Å—É—Å–∞\n"
                                         "2.–ú—É—Ä–∞–¥, –∏–Ω—Ñ–∞ —á—Ç–æ —Ç—ã –Ω–∞–µ–±—ë—à—å —Ç–∞–∫—Å–∏—Å—Ç–∞\n"
                                         "3.–ú—É—Ä–∞–¥, –∏–Ω—Ñ–∞ —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –∫–æ –º–Ω–µ –ø—Ä–∏–µ–¥–µ—Ç –ü—É—Ç–∏–Ω</b>.",
                                    reply_markup=markup, parse_mode="html")

    elif call.data == "speech":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ú—É—Ä–∞–¥–æ–º –Ω–∞"
                                         "—Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã.\n\n–ü—Ä–∏–º–µ—Ä:\n\n"
                                         "<b>1.–ú—É—Ä–∞–¥, –∫–∞–∫ –¥–µ–ª–∞?\n"
                                         "2.–ú—É—Ä–∞–¥, —á—Ç–æ —Å —Ç–∞–∫—Å–∏—Å—Ç–æ–º –±—ã–ª–æ?\n"
                                         "3.–ú—É—Ä–∞–¥, —è—Ö–∞–∞–∞–∞–∞–∞–∞–∞–π –±–ª—è—è—è—è—è—è—è—è</b>.",
                                    reply_markup=markup, parse_mode="html")

    elif call.data == "ask":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ú—É—Ä–∞–¥—É —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.\n\n–ü—Ä–∏–º–µ—Ä:\n\n"
                                         "<b>1.–ú—É—Ä–∞–¥, —Ç—ã –Ω–∞–µ–±–∞–ª —Ç–æ–≥–æ —Ç–∞–∫—Å–∏—Å—Ç–∞?\n"
                                         "2.–ú—É—Ä–∞–¥, –∫—Ç–æ —Ç–∞–∫–æ–π –ü—É—Ç–∏–Ω?\n"
                                         "3.–ú—É—Ä–∞–¥, —á—Ç–æ —Ç–∞–∫–æ–µ –±–∞—Ä–∞–Ω?</b>.",
                                    reply_markup=markup, parse_mode="HTML")

    elif call.data == "weather":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–í—ã –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —É –ú—É—Ä–∞–¥–∞ –ø–æ–≥–æ–¥—É.\n\n–ü—Ä–∏–º–µ—Ä:\n\n"
                                         "<b>–ú—É—Ä–∞–¥, —Å–∫–∞–∂–∏ –ø–æ–≥–æ–¥—É –≤ –ú–æ—Å–∫–≤–µ</b>",
                                    reply_markup=markup, parse_mode="HTML")

    elif call.data == "other":
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')
        markup.add(item1)
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                    text="–£ –ú—É—Ä–∞–¥–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–∫–Ω—Ü–∏–∏:\n\n"
                                         "1. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                                         "<b>–ú—É—Ä–∞–¥, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.</b>\n\n"
                                         "2. –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã:\n"
                                         "<b>–ú—É—Ä–∞–¥, –æ—Ç–∫–ª—é—á–∏ –∫–∞—Ä–º—É\n"
                                         "–ú—É—Ä–∞–¥, –≤–∫–ª—é—á–∏ –∫–∞—Ä–º—É</b>.\n\n"
                                         "3. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —á–ª–µ–Ω–æ–≤ –≤ –±–µ—Å–µ–¥–µ:\n"
                                         "<b>–ú—É—Ä–∞–¥, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –≤—Å–µ—Ö\n"
                                         "–ú—É—Ä–∞–¥, –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π</b>\n\n"
                                         "4. –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤(–ú–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º –∞–¥–º–∏–Ω)\n:"
                                         "<b>–ú—É—Ä–∞–¥, –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö\n"
                                         "–ú—É—Ä–∞–¥, –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n\n</b>"
                                         "5. –†–µ–≥—É–ª–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏(–±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ. –¢–æ–ª—å–∫–æ –≤–∏–ø):\n"
                                         "<b>–ú—É—Ä–∞–¥, –≤–∫–ª—é—á–∏—Å—å.\n"
                                         "–ú—É—Ä–∞–¥, –æ—Ç–∫–ª—é—á–∏—Å—å.\n"
                                         "–ú—É—Ä–∞–¥, —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).</b>",
                                    reply_markup=markup, parse_mode="HTML")

    elif "checkpay_" in call.data:
        payd = int(str(call.data).replace("checkpay_"))
        res = any_pay.get_payments(pay_id=payd)
        id = list(res['result']['payments'])[len(list(res['result']['payments'])) - 1]
        status = res['result']['payments'][id]['status']
        if status == 'paid':
            date_after_month = datetime.today() + relativedelta(months=1)
            cur.execute(
                f"UPDATE conf SET vip=1, vip_date='{date_after_month.strftime('%d/%m/%Y')}' WHERE conf_id={call.message.text.replace('/pro_active ', '')}")
            await bot.send_message(call.message.chat.id, "–í–∏–ø–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞, –±–ª—è")
            conn.commit()
        else:
            await bot.send_message(call.message.chat.id, "–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –±–ª—è")

    elif call.data == 'pro':
        await buy(call.message)

    elif call.data == 'pre_pro':
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–ö—É–ø–∏—Ç—å PRO –≤–µ—Ä—Å–∏—é", callback_data='pro')
        markup.add(item1)
        await bot.send_message(call.message.chat.id, """PRO –≤–µ—Ä—Å–∏—è –¥–∞—ë—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é, –æ—Ç 0 –¥–æ 100%

–£–ø–∞–ª –∞–∫—Ç–∏–≤ –≤ —á–∞—Ç–µ, —Å–∫—É—á–Ω–æ –∏–ª–∏ –Ω–µ—á–µ–≥–æ –¥–µ–ª–∞—Ç—å? –í–∫–ª—é—á–∏ –ú—É—Ä–∞–¥–∞. –ü–æ–≤–µ—Ä—å—Ç–µ, PRO –≤–µ—Ä—Å–∏—è –ú—É—Ä–∞–¥–∞ —Å–º–æ–∂–µ—Ç —É–¥–∏–≤–∏—Ç—å –≤–µ—Å—å —á–∞—Ç

–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –∫–æ–º–∞–Ω–¥–∞—Ö –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ /commands 

üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299 —Ä—É–±–ª–µ–π / –º–µ—Å—è—Ü

–í–Ω–∏–º–∞–Ω–∏–µ! –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –Ω—É–∂–Ω–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!
""", reply_markup=markup)

    elif call.data == 'stat':
        await adp.admin_stat(call.message)

    elif call.data == 'admin_panel':
        await adp.admin_panel(call.message, True)

    elif call.data == 'links':
        markup = InlineKeyboardMarkup(row_width=1)
        cur.execute('SELECT * FROM links')
        list_lnk = list(cur.fetchall())
        count = 0

        for i in range(0, len(list_lnk)):
            count += 1
            markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                            callback_data='link_' + str(list_lnk[i][0])))
            if count == 5:
                break

        item1 = InlineKeyboardButton("<", callback_data='prev')
        item2 = InlineKeyboardButton(">", callback_data='next')
        item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
        item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.row(item1, item2)
        markup.add(item3, item4)
        async with state.proxy() as adata:
            adata['list_lnk'] = list_lnk
            adata['count'] = count
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif call.data == 'vip_code':
        await adp.add_vip(call.message)
    elif call.data == 'next':
        async with state.proxy() as adata:
            list_lnk = adata['list_lnk']
            count = adata['count']
        if count < len(list_lnk):
            markup = InlineKeyboardMarkup(row_width=1)
            end_count = count + 5
            for i in range(count, end_count):
                if i == len(list_lnk):
                    count = len(list_lnk) + (5 - (len(list_lnk) % 5))
                    break
                count += 1
                markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                                callback_data='link_' + str(list_lnk[i][0])))

            item1 = InlineKeyboardButton("<", callback_data='prev')
            item2 = InlineKeyboardButton(">", callback_data='next')
            item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
            item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
            markup.row(item1, item2)
            markup.add(item3, item4)
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
            async with state.proxy() as adata:
                adata['list_lnk'] = list_lnk
                adata['count'] = count

    elif call.data == 'prev':
        async with state.proxy() as adata:
            list_lnk = adata['list_lnk']
            count = adata['count']
        if count > 5:
            markup = InlineKeyboardMarkup(row_width=1)
            end_count = count - 5
            count = count - 10

            if end_count < 0:
                end_count = 0

            for i in range(count, end_count):
                count += 1
                markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                                callback_data='link_' + str(list_lnk[i][0])))

            item1 = InlineKeyboardButton("<", callback_data='prev')
            item2 = InlineKeyboardButton(">", callback_data='next')
            item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
            item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
            markup.row(item1, item2)
            markup.add(item3, item4)

            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
            async with state.proxy() as adata:
                adata['list_lnk'] = list_lnk
                adata['count'] = count

    elif 'link' in call.data:
        id = str(call.data).replace('link_', '')
        cur.execute(f'SELECT * FROM links WHERE ID={id}')
        link = list(cur.fetchone())
        cur.execute(f'SELECT * FROM users_info WHERE user_link="{link[1]}"')
        conn.commit()
        users_count = list(cur.fetchall())
        cur.execute('SELECT * FROM conf')
        conf_list = list(cur.fetchall())
        count = 0
        for user in users_count:
            for conf in conf_list:
                try:
                    user_channel_status = await bot.get_chat_member(chat_id=conf[1], user_id=user[1])
                    if user_channel_status["status"] != 'left':
                        count += 1
                except:
                    pass
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_lnks_1' + id)
        item2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='links')
        markup.add(item1, item2)
        await call.message.edit_text(f'''
–ù–∞–∑–≤–∞–Ω–∏–µ: {link[1]}
URL: https://t.me/Murad_Aibot?start={link[1]}

–ü–µ—Ä–µ—Ö–æ–¥–æ–≤: {link[2]}
–ù–æ–≤—ã—Ö —é–∑–µ—Ä–æ–≤ (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã): {count}
                ''', reply_markup=markup)

    elif call.data[:10] == 'del_lnks_1':
        id = str(call.data).replace('del_lnks_1', '')
        print(id)
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_lnks_2' + id)
        item2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='links')
        markup.add(item1, item2)

        await call.message.edit_text("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Å—ã–ª–∫—É?", reply_markup=markup)

    elif call.data[:10] == 'del_lnks_2':
        id = str(call.data).replace('del_lnks_2', '')
        print(id)
        cur.execute(f"DELETE FROM links WHERE ID={id}")
        conn.commit()
        markup = InlineKeyboardMarkup(row_width=1)
        cur.execute('SELECT * FROM links')
        list_lnk = list(cur.fetchall())
        count = 0

        for i in range(0, len(list_lnk)):
            count += 1
            markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                            callback_data='link_' + str(list_lnk[i][0])))
            if count == 5:
                break

        item1 = InlineKeyboardButton("<", callback_data='prev')
        item2 = InlineKeyboardButton(">", callback_data='next')
        item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
        item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.row(item1, item2)
        markup.add(item3, item4)
        async with state.proxy() as adata:
            adata['list_lnk'] = list_lnk
            adata['count'] = count
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif call.data == 'channels':
        markup = InlineKeyboardMarkup(row_width=1)
        cur.execute('SELECT * FROM channels')
        list_chn = list(cur.fetchall())
        count = 0

        for i in range(0, len(list_chn)):
            count += 1
            markup.add(InlineKeyboardButton(str(list_chn[i][1]),
                                            callback_data='chnl_' + str(list_chn[i][0])))
            if count == 5:
                break

        item1 = InlineKeyboardButton("<", callback_data='prev_chn')
        item2 = InlineKeyboardButton(">", callback_data='next_chn')
        item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_chn')
        item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.row(item1, item2)
        markup.add(item3, item4)
        async with state.proxy() as adata:
            adata['list_chn'] = list_chn
            adata['count'] = count
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif call.data == 'next_chn':
        async with state.proxy() as adata:
            list_chn = adata['list_chn']
            count = adata['count']
        if count < len(list_chn):
            markup = InlineKeyboardMarkup(row_width=1)
            end_count = count + 5
            for i in range(count, end_count):
                if i == len(list_chn):
                    count = len(list_chn) + (5 - (len(list_chn) % 5))
                    break
                count += 1
                markup.add(InlineKeyboardButton(str(list_chn[i][1]),
                                                callback_data='chnl_' + str(list_chn[i][0])))

            item1 = InlineKeyboardButton("<", callback_data='prev_chn')
            item2 = InlineKeyboardButton(">", callback_data='next_chn')
            item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_chn')
            item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
            markup.row(item1, item2)
            markup.add(item3, item4)
            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
            async with state.proxy() as adata:
                adata['list_chn'] = list_chn
                adata['count'] = count

    elif call.data == 'prev_chn':
        async with state.proxy() as adata:
            list_chn = adata['list_chn']
            count = adata['count']
        if count > 5:
            markup = InlineKeyboardMarkup(row_width=1)
            end_count = count - 5
            count = count - 10

            if end_count < 0:
                end_count = 0

            for i in range(count, end_count):
                count += 1
                markup.add(InlineKeyboardButton(str(list_chn[i][1]),
                                                callback_data='chnl_' + str(list_chn[i][0])))

            item1 = InlineKeyboardButton("<", callback_data='prev_chn')
            item2 = InlineKeyboardButton(">", callback_data='next_chn')
            item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_chn')
            item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
            markup.row(item1, item2)
            markup.add(item3, item4)

            await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)
            async with state.proxy() as adata:
                adata['list_chn'] = list_chn
                adata['count'] = count

    elif 'chnl' in call.data:
        id = str(call.data).replace('chnl', '')

        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data='del_chns_1' + id)
        item2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='channels')
        markup.add(item1, item2)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif call.data[:10] == 'del_chns_1':
        id = str(call.data).replace('del_chns_1', '')
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data='del_chns_2' + id)
        item2 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='links')
        markup.add(item1, item2)

        await call.message.edit_text("–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª?", reply_markup=markup)

    elif call.data[:10] == 'del_chns_2':
        id = str(call.data).replace('del_chns_2_', '')
        cur.execute(f"DELETE FROM channels WHERE ID={id}")
        conn.commit()
        markup = InlineKeyboardMarkup(row_width=1)
        cur.execute('SELECT * FROM channels')
        list_lnk = list(cur.fetchall())
        count = 0

        for i in range(0, len(list_lnk)):
            count += 1
            markup.add(InlineKeyboardButton(str(list_lnk[i][1]),
                                            callback_data='chnl_' + str(list_lnk[i][0])))
            if count == 5:
                break

        item1 = InlineKeyboardButton("<", callback_data='prev_chn')
        item2 = InlineKeyboardButton(">", callback_data='next_chn')
        item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data='add_chn')
        item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.row(item1, item2)
        markup.add(item3, item4)
        async with state.proxy() as adata:
            adata['list_chn'] = list_lnk
            adata['count'] = count
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif call.data[:8] == 'del_chns':
        id = str(call.data).replace('del_chns_', '')
        cur.execute(f"DELETE FROM channels WHERE ID={id}")
        conn.commit()
        markup = InlineKeyboardMarkup(row_width=1)
        cur.execute('SELECT * FROM channels')
        list_chn = list(cur.fetchall())
        count = 0

        for i in range(0, len(list_chn)):
            count += 1
            markup.add(InlineKeyboardButton(str(list_chn[i][0]) + " " + str(list_chn[i][1]),
                                            callback_data='chnl_' + str(list_chn[i][0])))
            if count == 5:
                break

        item1 = InlineKeyboardButton("<", callback_data='prev_chn')
        item2 = InlineKeyboardButton(">", callback_data='next_chn')
        item3 = InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data='add_lnk')
        item4 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.row(item1, item2)
        markup.add(item3, item4)
        async with state.proxy() as adata:
            adata['list_chn'] = list_chn
            adata['count'] = count
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif 'lnk' in call.data:
        print(call.data)
        async with state.proxy() as adata:
            adata['stage'] = await adp.links(call.message, call.data)

    elif 'chn' in call.data:
        print(call.data)
        async with state.proxy() as adata:
            adata['stage'] = await adp.channels(call.message, call.data)

    elif call.data == 'export':
        markup = InlineKeyboardMarkup(row_width=1)
        item1 = InlineKeyboardButton("–Æ–∑–µ—Ä—ã (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ —á–∞—Ç—ã)", callback_data='users_export')
        item2 = InlineKeyboardButton("–ì—Ä—É–ø–ø—ã", callback_data='group_export')
        item3 = InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_panel')
        markup.add(item1, item2, item3)
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=markup)

    elif 'export' in call.data:
        await adp.export(call.message, call.data)


if __name__ == '__main__':
    th = Thread(target=timechecker)
    th.start()
    executor.start_polling(dp, skip_updates=True)
